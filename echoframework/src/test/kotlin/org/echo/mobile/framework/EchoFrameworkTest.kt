package org.echo.mobile.framework

import com.google.common.primitives.UnsignedLong
import org.echo.mobile.framework.core.crypto.internal.CryptoCoreComponentImpl
import org.echo.mobile.framework.core.crypto.internal.eddsa.key.IrohaKeyPairCryptoAdapter
import org.echo.mobile.framework.exception.LocalException
import org.echo.mobile.framework.model.*
import org.echo.mobile.framework.model.contract.*
import org.echo.mobile.framework.model.contract.input.AccountAddressInputValueType
import org.echo.mobile.framework.model.contract.input.ContractInputEncoder
import org.echo.mobile.framework.model.contract.input.InputValue
import org.echo.mobile.framework.model.contract.input.StringInputValueType
import org.echo.mobile.framework.model.network.Echodevnet
import org.echo.mobile.framework.model.socketoperations.ResultCallback
import org.echo.mobile.framework.service.UpdateListener
import org.echo.mobile.framework.support.*
import org.echo.mobile.framework.support.concurrent.future.FutureTask
import org.echo.mobile.framework.support.concurrent.future.completeCallback
import org.echo.mobile.framework.support.concurrent.future.wrapResult
import org.junit.Assert
import org.junit.Assert.*
import org.junit.Test
import java.math.BigDecimal
import java.util.concurrent.TimeUnit
import kotlin.concurrent.thread

/**
 * Test cases for [EchoFramework]
 *
 * @author Dmitriy Bushuev
 */
class EchoFrameworkTest {
    private fun initFramework(ratio: BigDecimal = BigDecimal.ONE): EchoFramework {
        return EchoFramework.create(
                Settings.Configurator()
                        .setUrl("wss://devnet.echo-dev.io/ws")
                        .setNetworkType(Echodevnet())
                        .setReturnOnMainThread(false)
                        .setApis(
                                Api.DATABASE,
                                Api.NETWORK_BROADCAST,
                                Api.ACCOUNT_HISTORY,
                                Api.REGISTRATION
                        )
                        .setFeeRatio(ratio)
                        .configure()
        )
    }

    private val legalContractParamsId = "1.11.0" //259 //256
    private val legalTokenId = "1.11.0"
    private val accountId = "1.2.22"
    private val login = "pas10"
    private val wif = "5JikeywbQTU56X1AbtNi3jPR6e2xqSbXog9CZaa3jk7EURymhf9"
    private val secondAccountId = "1.2.45"
    private val secondLogin = "pas11"
    private val secondWif = "5KdiTokRk18PTHCNVVKjxkkGsgtQXs4yoywwwMk7msf6HUJ3TKg"
    private val legalAssetId = "1.3.0"

    private val legalContractParamsBytecode =
            "60806040526000805534801561001457600080fd5b506104e180610024600" +
                    "0396000f3fe608060405260043610610088576000357c01000000000000000000000000000000000000" +
                    "00000000000000000000900480631361c3941461008d5780635b34b966146100a45780637a3a86b2146" +
                    "100bb578063a87d942c1461014c578063b835666314610177578063c820d1b21461018e578063e13a77" +
                    "16146102cf578063f5c5ad8314610319575b600080fd5b34801561009957600080fd5b506100a261033" +
                    "0565b005b3480156100b057600080fd5b506100b961039a565b005b3480156100c757600080fd5b5061" +
                    "010a600480360360208110156100de57600080fd5b81019080803573fffffffffffffffffffffffffff" +
                    "fffffffffffff1690602001909291905050506103ac565b604051808273ffffffffffffffffffffffff" +
                    "ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040" +
                    "5180910390f35b34801561015857600080fd5b506101616103b6565b604051808281526020019150506" +
                    "0405180910390f35b34801561018357600080fd5b5061018c6103bf565b005b34801561019a57600080" +
                    "fd5b50610254600480360360208110156101b157600080fd5b81019080803590602001906401000000" +
                    "008111156101ce57600080fd5b8201836020820111156101e057600080fd5b803590602001918460018" +
                    "3028401116401000000008311171561020257600080fd5b91908080601f016020809104026020016040" +
                    "519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808" +
                    "30192505050505050509192919290505050610491565b60405180806020018281038252838181518152" +
                    "60200191508051906020019080838360005b838110156102945780820151818401526020810190506102" +
                    "79565b50505050905090810190601f1680156102c15780820380516001836020036101000a0319168152" +
                    "60200191505b509250505060405180910390f35b6102d761049b565b604051808273fffffffffffffff" +
                    "fffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915" +
                    "05060405180910390f35b34801561032557600080fd5b5061032e6104a3565b005b7f65e06b3884a88e1" +
                    "3243953e5160aec7a836e4cc7abc0762f84c66d6b918efe7f60405180806020018281038252600981526" +
                    "02001807f6c6f67206576656e7400000000000000000000000000000000000000000000008152506020" +
                    "0191505060405180910390a1565b60016000808282540192505081905550565b6000819050919050565" +
                    "b60008054905090565b7f65e06b3884a88e13243953e5160aec7a836e4cc7abc0762f84c66d6b918efe" +
                    "7f60405180806020018281038252600f8152602001807f6c6f67206576656e742066697273740000000" +
                    "00000000000000000000000000081525060200191505060405180910390a17f65e06b3884a88e1324395" +
                    "3e5160aec7a836e4cc7abc0762f84c66d6b918efe7f60405180806020018281038252601081526020018" +
                    "07f6c6f67206576656e74207365636f6e640000000000000000000000000000000081525060200191505" +
                    "060405180910390a1565b6060819050919050565b600033905090565b600160008082825403925050819" +
                    "0555056fea165627a7a7230582093e5f08daa13bf9bc7c17df95e119be299398beca796aa23631e9174" +
                    "4285958f0029"

    private val legalContractWithParamsBytecode =
            "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908" +
                    "373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005157600080fd5" +
                    "b50604051602080610375833981018060405281019080805190602001909291905050508060026" +
                    "0006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373fffffff" +
                    "fffffffffffffffffffffffffffffffff160217905550806000806101000a81548173fffffffff" +
                    "fffffffffffffffffffffffffffffff021916908373fffffffffffffffffffffffffffffffffff" +
                    "fffff16021790555050610270806101056000396000f3006080604052600436106100415760003" +
                    "57c0100000000000000000000000000000000000000000000000000000000900463ffffffff168" +
                    "063f2c298be14610046575b600080fd5b34801561005257600080fd5b506100ad6004803603810" +
                    "19080803590602001908201803590602001908080601f016020809104026020016040519081016" +
                    "04052809392919081815260200183838082843782019150505050505091929192905050506100a" +
                    "f565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1" +
                    "673ffffffffffffffffffffffffffffffffffffffff1663f2c298be826040518263ffffffff167" +
                    "c01000000000000000000000000000000000000000000000000000000000281526004018080602" +
                    "001828103825283818151815260200191508051906020019080838360005b83811015610159578" +
                    "08201518184015260208101905061013e565b50505050905090810190601f16801561018657808" +
                    "20380516001836020036101000a031916815260200191505b50925050506000604051808303816" +
                    "00087803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b50505" +
                    "0507f248e1568b00b4eb005baa2f75ec2d472c0c98685c367661e1ffcbdc0f26fdfe1600080905" +
                    "4906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273fffffff" +
                    "fffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1" +
                    "6815260200191505060405180910390a1505600a165627a7a723058203a4f281bf5a18502c2caf" +
                    "37eac0d1729a184bab65879a54b6481020492b675e10029"

    private val legalTokenBytecode = "60806040526000600960146101000a81548160ff021916908315150217" +
            "9055506000600960156101000a81548160ff02191690831515021790555060405180606001604052806" +
            "02f81526020016200411b602f9139600b90805190602001906200006b92919062000ca0565b50348015" +
            "6200007957600080fd5b506040516200414a3803806200414a833981810160405260c08110156200009" +
            "f57600080fd5b8101908080516040519392919084640100000000821115620000c057600080fd5b8382" +
            "0191506020820185811115620000d757600080fd5b82518660018202830111640100000000821117156" +
            "20000f557600080fd5b8083526020830192505050908051906020019080838360005b83811015620001" +
            "2b5780820151818401526020810190506200010e565b50505050905090810190601f168015620001595" +
            "780820380516001836020036101000a031916815260200191505b506040526020018051604051939291" +
            "90846401000000008211156200017d57600080fd5b83820191506020820185811115620001945760008" +
            "0fd5b8251866001820283011164010000000082111715620001b257600080fd5b808352602083019250" +
            "5050908051906020019080838360005b83811015620001e857808201518184015260208101905062000" +
            "1cb565b50505050905090810190601f168015620002165780820380516001836020036101000a031916" +
            "815260200191505b5060405260200180519060200190929190805190602001909291908051906020019" +
            "09291908051906020019092919050505085858585858484848484818585858260009080519060200190" +
            "6200026e92919062000ca0565b5081600190805190602001906200028792919062000ca0565b5080600" +
            "260006101000a81548160ff021916908360ff160217905550505050620002b733620004a760201b6020" +
            "1c565b600081116200032e576040517f08c379a00000000000000000000000000000000000000000000" +
            "000000000000081526004018080602001828103825260158152602001807f4552433230436170706564" +
            "3a206361702069732030000000000000000000000081525060200191505060405180910390fd5b80600" +
            "7819055505062000347336200050860201b60201c565b33600960006101000a81548173ffffffffffff" +
            "ffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160" +
            "217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ff" +
            "ffffffffffffffffffffffffffffffffffffff16600073fffffffffffffffffffffffffffffffffffff" +
            "fff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0604051604051" +
            "80910390a36000811115620004315762000430620004236200056960201b60201c565b8262000593602" +
            "01b60201c565b5b50505050506200044e6301ffc9a760e01b6200064f60201b60201c565b6200046663" +
            "4bbee2df60e01b6200064f60201b60201c565b6200047e63fb9ec8ce60e01b6200064f60201b60201c5" +
            "65b505050505080156200049b576200049a6200075960201b60201c565b5b50505050505062000d4f56" +
            "5b620004c28160066200082560201b62002f851790919060201c565b8073fffffffffffffffffffffff" +
            "fffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3" +
            "f660405160405180910390a250565b620005238160086200082560201b62002f851790919060201c565" +
            "b8073ffffffffffffffffffffffffffffffffffffffff167fac6fa858e9350a46cec16539926e0fde25" +
            "b7629f84b5a72bffaae4df888ae86d60405160405180910390a250565b6000600960009054906101000" +
            "a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600754620005bf82620005ab" +
            "6200090960201b60201c565b6200091360201b6200211e1790919060201c565b1115620006345760405" +
            "17f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060" +
            "2001828103825260198152602001807f45524332304361707065643a206361702065786365656465640" +
            "000000000000081525060200191505060405180910390fd5b6200064b82826200099c60201b62003060" +
            "1760201c565b5050565b63ffffffff60e01b817bfffffffffffffffffffffffffffffffffffffffffff" +
            "fffffffffffff19161415620006ec576040517f08c379a0000000000000000000000000000000000000" +
            "00000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a2" +
            "0696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd" +
            "5b6001600a6000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bfff" +
            "fffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000" +
            "2060006101000a81548160ff02191690831515021790555050565b6200076962000b6860201b60201c5" +
            "65b620007dc576040517f08c379a0000000000000000000000000000000000000000000000000000000" +
            "0081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206" +
            "973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001600960156101" +
            "000a81548160ff0219169083151502179055507f75fce015c314a132947a3e42f6ab79ab8e05397dabf" +
            "35b4d742dea228bbadc2d60405160405180910390a1565b62000837828262000bc060201b60201c565b" +
            "15620008ab576040517f08c379a00000000000000000000000000000000000000000000000000000000" +
            "0815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c" +
            "72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008" +
            "373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffff" +
            "ffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505" +
            "0565b6000600554905090565b60008082840190508381101562000992576040517f08c379a000000000" +
            "000000000000000000000000000000000000000000000000815260040180806020018281038252601b8" +
            "152602001807f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815250" +
            "60200191505060405180910390fd5b8091505092915050565b600073fffffffffffffffffffffffffff" +
            "fffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000a40576040517f" +
            "08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200" +
            "18281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f206164647" +
            "26573730081525060200191505060405180910390fd5b62000a5c816005546200091360201b6200211e1" +
            "790919060201c565b60058190555062000abb81600360008573fffffffffffffffffffffffffffffffff" +
            "fffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546" +
            "200091360201b6200211e1790919060201c565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180620040f96022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ce357805160ff191683800117855562000d14565b8280016001018555821562000d14579182015b8281111562000d1357825182559160200191906001019062000cf6565b5b50905062000d23919062000d27565b5090565b62000d4c91905b8082111562000d4857600081600090555060010162000d2e565b5090565b90565b61339a8062000d5f6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806379cc67901161013b578063a9059cbb116100b8578063cae9ca511161007c578063cae9ca5114610dc7578063d8fbe99414610ec4578063dd62ed3e14610f4a578063f1b50c1d14610fc2578063f2fde38b14610fcc57610248565b8063a9059cbb14610b21578063aa271e1a14610b87578063ac8a584a14610be3578063b60b708414610c27578063c1d34b8914610caa57610248565b806395d89b41116100ff57806395d89b41146109a6578063983b2d5614610a295780639865027514610a6d5780639870d7fe14610a77578063a457c2d714610abb57610248565b806379cc6790146108945780637d64bcb4146108e25780638980f11f146108ec5780638da5cb5b1461093a5780638f32d59b1461098457610248565b80633177029f116101c957806342966c681161018d57806342966c68146107865780634cd412d5146107b45780636d70f7ae146107d657806370a0823114610832578063715018a61461088a57610248565b80633177029f14610539578063355274ea1461059f57806339509351146105bd5780634000aea01461062357806340c10f191461072057610248565b806318160ddd1161021057806318160ddd1461042357806323b872dd146104415780632ab6f8db146104c75780633092afd5146104d1578063313ce5671461051557610248565b806301ffc9a71461024d57806305d2035b146102b257806306fdde03146102d4578063095ea7b3146103575780631296ee62146103bd575b600080fd5b6102986004803603602081101561026357600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611010565b604051808215151515815260200191505060405180910390f35b6102ba611078565b604051808215151515815260200191505060405180910390f35b6102dc61108f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031c578082015181840152602081019050610301565b50505050905090810190601f1680156103495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103a36004803603604081101561036d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611131565b604051808215151515815260200191505060405180910390f35b610409600480360360408110156103d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611148565b604051808215151515815260200191505060405180910390f35b61042b61116c565b6040518082815260200191505060405180910390f35b6104ad6004803603606081101561045757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611176565b604051808215151515815260200191505060405180910390f35b6104cf6111b7565b005b610513600480360360208110156104e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c2565b005b61051d611248565b604051808260ff1660ff16815260200191505060405180910390f35b6105856004803603604081101561054f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061125f565b604051808215151515815260200191505060405180910390f35b6105a7611283565b6040518082815260200191505060405180910390f35b610609600480360360408110156105d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061128d565b604051808215151515815260200191505060405180910390f35b6107066004803603606081101561063957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561068057600080fd5b82018360208201111561069257600080fd5b803590602001918460018302840111640100000000831117156106b457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611332565b604051808215151515815260200191505060405180910390f35b61076c6004803603604081101561073657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611367565b604051808215151515815260200191505060405180910390f35b6107b26004803603602081101561079c57600080fd5b8101908080359060200190929190505050611395565b005b6107bc6113a2565b604051808215151515815260200191505060405180910390f35b610818600480360360208110156107ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b9565b604051808215151515815260200191505060405180910390f35b6108746004803603602081101561084857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113d6565b6040518082815260200191505060405180910390f35b61089261141f565b005b6108e0600480360360408110156108aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061155a565b005b6108ea611568565b005b6109386004803603604081101561090257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611645565b005b61094261178d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61098c6117b7565b604051808215151515815260200191505060405180910390f35b6109ae61180f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109ee5780820151818401526020810190506109d3565b50505050905090810190601f168015610a1b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610a6b60048036036020811015610a3f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118b1565b005b610a7561191b565b005b610ab960048036036020811015610a8d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611926565b005b610b0760048036036040811015610ad157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611944565b604051808215151515815260200191505060405180910390f35b610b6d60048036036040811015610b3757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119e9565b604051808215151515815260200191505060405180910390f35b610bc960048036036020811015610b9d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a28565b604051808215151515815260200191505060405180910390f35b610c2560048036036020811015610bf957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a45565b005b610c2f611acb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6f578082015181840152602081019050610c54565b50505050905090810190601f168015610c9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610dad60048036036080811015610cc057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610d2757600080fd5b820183602082011115610d3957600080fd5b80359060200191846001830284011164010000000083111715610d5b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b69565b604051808215151515815260200191505060405180910390f35b610eaa60048036036060811015610ddd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610e2457600080fd5b820183602082011115610e3657600080fd5b80359060200191846001830284011164010000000083111715610e5857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ba0565b604051808215151515815260200191505060405180910390f35b610f3060048036036060811015610eda57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bcc565b604051808215151515815260200191505060405180910390f35b610fac60048036036040811015610f6057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bf2565b6040518082815260200191505060405180910390f35b610fca611c79565b005b61100e60048036036020811015610fe257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d3c565b005b6000600a6000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600960149054906101000a900460ff16905090565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111275780601f106110fc57610100808354040283529160200191611127565b820191906000526020600020905b81548152906001019060200180831161110a57829003601f168201915b5050505050905090565b600061113e338484611dc2565b6001905092915050565b6000611164838360405180602001604052806000815250611332565b905092915050565b6000600554905090565b600083600960159054906101000a900460ff16806111995750611198816113b9565b5b6111a257600080fd5b6111ad858585611fb9565b9150509392505050565b6111c03361206a565b565b6111ca6117b7565b61123c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611245816120c4565b50565b6000600260009054906101000a900460ff16905090565b600061127b838360405180602001604052806000815250611ba0565b905092915050565b6000600754905090565b6000611328338461132385600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211e90919063ffffffff16565b611dc2565b6001905092915050565b600061133e84846119e9565b61134757600080fd5b611353338585856121a6565b61135c57600080fd5b600190509392505050565b6000600960149054906101000a900460ff161561138357600080fd5b61138d838361238f565b905092915050565b61139f3382612403565b50565b6000600960159054906101000a900460ff16905090565b60006113cf8260086125a390919063ffffffff16565b9050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6114276117b7565b611499576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6115648282612681565b5050565b6115706117b7565b6115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600960149054906101000a900460ff16156115fc57600080fd5b6001600960146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1565b61164d6117b7565b6116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6116e361178d565b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561174d57600080fd5b505af1158015611761573d6000803e3d6000fd5b505050506040513d602081101561177757600080fd5b8101908080519060200190929190505050505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118a75780601f1061187c576101008083540402835291602001916118a7565b820191906000526020600020905b81548152906001019060200180831161188a57829003601f168201915b5050505050905090565b6118ba33611a28565b61190f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806132896030913960400191505060405180910390fd5b61191881612728565b50565b611924336120c4565b565b61192f336113b9565b61193857600080fd5b61194181612782565b50565b60006119df33846119da85600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127dc90919063ffffffff16565b611dc2565b6001905092915050565b600033600960159054906101000a900460ff1680611a0c5750611a0b816113b9565b5b611a1557600080fd5b611a1f8484612865565b91505092915050565b6000611a3e8260066125a390919063ffffffff16565b9050919050565b611a4d6117b7565b611abf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611ac88161206a565b50565b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b615780601f10611b3657610100808354040283529160200191611b61565b820191906000526020600020905b815481529060010190602001808311611b4457829003601f168201915b505050505081565b6000611b76858585611176565b611b7f57600080fd5b611b8b858585856121a6565b611b9457600080fd5b60019050949350505050565b6000611bac8484611131565b50611bb884848461287c565b611bc157600080fd5b600190509392505050565b6000611be984848460405180602001604052806000815250611b69565b90509392505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611c816117b7565b611cf3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001600960156101000a81548160ff0219169083151502179055507f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d60405160405180910390a1565b611d446117b7565b611db6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611dbf81612a30565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133426024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ece576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132676022913960400191505060405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b6000611fc6848484612b76565b61205f843361205a85600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127dc90919063ffffffff16565b611dc2565b600190509392505050565b61207e816008612e1690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d60405160405180910390a250565b6120d8816006612e1690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008082840190508381101561219c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60006121c78473ffffffffffffffffffffffffffffffffffffffff16612ed3565b6121d45760009050612387565b60008473ffffffffffffffffffffffffffffffffffffffff166388a7ca5c338887876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156122af578082015181840152602081019050612294565b50505050905090810190601f1680156122dc5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b505050506040513d602081101561232857600080fd5b810190808051906020019092919050505090506388a7ca5c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600061239a33611a28565b6123ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806132896030913960400191505060405180910390fd5b6123f98383612ee6565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612489576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806132fc6021913960400191505060405180910390fd5b61249e816005546127dc90919063ffffffff16565b6005819055506124f681600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127dc90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561262a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806132da6022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61268b8282612403565b612724823361271f84600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127dc90919063ffffffff16565b611dc2565b5050565b61273c816006612f8590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b612796816008612f8590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d60405160405180910390a250565b600082821115612854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000612872338484612b76565b6001905092915050565b600061289d8473ffffffffffffffffffffffffffffffffffffffff16612ed3565b6128aa5760009050612a29565b60008473ffffffffffffffffffffffffffffffffffffffff16637b04a2d03386866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612952578082015181840152602081019050612937565b50505050905090810190601f16801561297f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156129a057600080fd5b505af11580156129b4573d6000803e3d6000fd5b505050506040513d60208110156129ca57600080fd5b81019080805190602001909291905050509050637b04a2d060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ab6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806132416026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612bfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061331d6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061321e6023913960400191505060405180910390fd5b612cd481600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127dc90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d6981600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211e90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b612e2082826125a3565b612e75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806132b96021913960400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080823b905060008111915050919050565b600754612f0382612ef561116c565b61211e90919063ffffffff16565b1115612f77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f45524332304361707065643a206361702065786365656465640000000000000081525060200191505060405180910390fd5b612f818282613060565b5050565b612f8f82826125a3565b15613002576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613103576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6131188160055461211e90919063ffffffff16565b60058190555061317081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461211e90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f20616464726573734d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f206164647265737345524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a265627a7a723158200a2fb81096b9860be08b3cadc6291dd61265bca0f512f443b9cf50d71024933264736f6c634300050b0032526f6c65733a206163636f756e7420697320746865207a65726f206164647265737368747470733a2f2f766974746f6d696e61636f72692e6769746875622e696f2f65726332302d67656e657261746f7200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000944696d6156616c69640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000444494d5600000000000000000000000000000000000000000000000000000000"

    private val illegalContractId = "1.11.-1"
    private val illegalHistoryItemId = "1.12.-1"

    private val validContractPrefix = "1.11."
    private val validContractResultPrefix = "1.12."

    private val cryptoCoreComponent by lazy {
        CryptoCoreComponentImpl(IrohaKeyPairCryptoAdapter())
    }

    @Test
    fun connectTest() {
        val framework = initFramework()

        assertTrue(connect(framework) ?: false)
    }

    @Test(expected = LocalException::class)
    fun disconnectTest() {
        val framework = initFramework()

        assertTrue(connect(framework) ?: false)

        val futureHistory = FutureTask<HistoryResponse>()

        framework.getAccountHistory(
                accountId,
                "1.10.0",
                "1.10.0",
                20,
                futureHistory.completeCallback()
        )

        framework.stop()

        futureHistory.get()
    }

    @Test
    fun connectFailedTest() {
        val framework = EchoFramework.create(
                Settings.Configurator()
                        .setUrl("wrongUrl")
                        .setReturnOnMainThread(false)
                        .setApis(
                                Api.DATABASE,
                                Api.NETWORK_BROADCAST,
                                Api.ACCOUNT_HISTORY
                        )
                        .configure()
        )

        assertFalse(connect(framework) ?: false)
    }

    @Test
    fun isOwnedBySuccess() {
        val framework = initFramework()

        val futureLogin = FutureTask<FullAccount>()

        if (connect(framework) == false) fail("Connection error")

        framework.isOwnedBy(
                login,
                wif,
                futureLogin.completeCallback()
        )

        val account = futureLogin.get()
        println(account?.assets?.toString())
        assertTrue(account != null)
    }

    @Test
    fun isOwnedByFailure() {
        val framework = initFramework()

        val futureLoginFailure = FutureTask<FullAccount>()

        if (connect(framework) == false) fail("Connection error")

        framework.isOwnedBy(
                "pas1",
                "WrongPassword",
                futureLoginFailure.completeCallback()
        )

        var accountFail: FullAccount? = null

        futureLoginFailure.wrapResult<Exception, FullAccount>(1, TimeUnit.MINUTES)
                .fold({ foundAccount ->
                    accountFail = foundAccount
                }, {
                    accountFail = null
                })

        assertTrue(accountFail == null)
    }

    @Test
    fun getAccountTest() {
        val framework = initFramework()

        val futureAccount = FutureTask<FullAccount>()

        if (connect(framework) == false) fail("Connection error")

        framework.getAccount(login, futureAccount.completeCallback())

        val account = futureAccount.get()
        assertTrue(account != null)
    }

    @Test
    fun getAccountByWifTest() {
        val framework = initFramework()

        val futureAccounts = FutureTask<List<FullAccount>>()

        if (connect(framework) == false) fail("Connection error")

        framework.getAccountsByWif(
                wif,
                futureAccounts.completeCallback()
        )

        val accounts = futureAccounts.get()
        assertTrue(accounts?.isNotEmpty() == true)
    }

    @Test
    fun checkAccountReservedTest() {
        val framework = initFramework()

        val futureCheckReserved = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.checkAccountReserved(login, futureCheckReserved.completeCallback())

        assertTrue(futureCheckReserved.get() ?: false)

        val futureCheckAvailable = FutureTask<Boolean>()

        framework.checkAccountReserved("edgewruferjd", futureCheckAvailable.completeCallback())

        assertFalse(futureCheckAvailable.get() ?: false)
    }

    @Test
    fun getBalanceTest() {
        val framework = initFramework()

        val futureBalanceExistent = FutureTask<AccountBalance>()

        if (connect(framework) == false) fail("Connection error")

        framework.getBalance(login, "1.3.0", futureBalanceExistent.completeCallback())

        assertTrue(futureBalanceExistent.get() != null)
    }

    @Test(expected = LocalException::class)
    fun getNonexistentAssetBalanceTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureBalanceNonexistent = FutureTask<AccountBalance>()

        framework.getBalance(
                login,
                "ergergger",
                futureBalanceNonexistent.completeCallback()
        )

        assertNotNull(futureBalanceNonexistent.get())
    }

    @Test
    fun accountHistoryByIdTest() = getAccountHistory(accountId)

    @Test
    fun accountHistoryByNameTest() = getAccountHistory(login)

    private fun getAccountHistory(nameOrId: String) {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureAccountHistory = FutureTask<HistoryResponse>()

        framework.getAccountHistory(
                nameOrId,
                "1.6.0",
                "1.6.0",
                100,
                futureAccountHistory.completeCallback()
        )

        val history = futureAccountHistory.get()

        assertNotNull(history)
        assertTrue(history?.transactions?.isNotEmpty() ?: false)
        assertNotNull(history?.transactions?.get(0)?.blockNum)
    }

    @Test
    fun changeWifTest() {
        val framework = initFramework()

        val futureChangePassword = FutureTask<Boolean>()
        if (connect(framework) == false) fail("Connection error")

        val oldWif = wif
        val newWif = wif

        framework.changeKeys(
                login,
                oldWif,
                newWif,
                futureChangePassword.completeCallback(),
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                    }

                    override fun onError(error: LocalException) {
                        fail(error.message)
                    }

                })
        )

        assertTrue(futureChangePassword.get() ?: false)
    }

    @Test
    fun generateEthereumAddressWithWifTest() {
        val framework = initFramework()

        val futureChangePassword = FutureTask<Boolean>()
        val futureResult = FutureTask<TransactionResult>()

        if (connect(framework) == false) fail("Connection error")

        framework.generateEthereumAddress(
                secondLogin,
                secondWif,
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureChangePassword.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        futureChangePassword.setComplete(error)
                    }

                },
                ResultCallback(object: Callback<TransactionResult>{
                    override fun onSuccess(result: TransactionResult) {
                        futureResult.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        futureResult.setComplete(error)
                    }

                })
        )

        assertTrue(futureChangePassword.get()?: false)
        println(futureResult.get().toString())
        assertNotNull(futureResult.get())
    }

    @Test
    fun generateBitcoinAddressWithWifTest() {
        val framework = initFramework()

        val futureChangePassword = FutureTask<Boolean>()
        val futureResult = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.generateBitcoinAddress(
                secondLogin,
                secondWif,
                "mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt",
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureChangePassword.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        futureChangePassword.setComplete(error)
                    }

                },
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                        futureResult.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        futureResult.setComplete(false)
                        futureChangePassword.setComplete(error)
                    }

                })
        )

        assertNotNull(futureResult.get() ?: false)
    }

    @Test
    fun getEthereumAddressTest() {
        val framework = initFramework()

        val futureEthereum = FutureTask<EthAddress>()

        if (connect(framework) == false) fail("Connection error")

        framework.getEthereumAddress(
                secondLogin,
                object : Callback<EthAddress> {
                    override fun onSuccess(result: EthAddress) {
                        println(result)
                        futureEthereum.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        futureEthereum.setComplete(error)
                    }

                })

        assertNotNull(futureEthereum.get() ?: false)
    }

    @Test
    fun getBitcoinAddressTest() {
        val framework = initFramework()

        val futureEthereum = FutureTask<BtcAddress>()

        if (connect(framework) == false) fail("Connection error")

        framework.getBitcoinAddress(
                login,
                object : Callback<BtcAddress> {
                    override fun onSuccess(result: BtcAddress) {
                        futureEthereum.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        futureEthereum.setComplete(error)
                    }

                })

        val address = futureEthereum.get()
        assertNotNull(address ?: false)
    }

//    @Test
//    fun withdrawEthereumWithWifTest() {
//        val framework = initFramework()
//
//        val futureChangePassword = FutureTask<Boolean>()
//        val futureResult = FutureTask<TransactionResult>()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        framework.ethWithdraw(
//            "vsharaev",
//            "5KjC8BiryoxUNz3dEY2ZWQK5ssmD84JgRGemVWwxfNgiPoxcaVa",
//            "0x46Ba2677a1c982B329A81f60Cf90fBA2E8CA9fA8",
//            "1",
//            "1.3.0",
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureChangePassword.setComplete(result)
//                }
//
//                override fun onError(error: LocalException) {
//                    error.printStackTrace()
//                    futureChangePassword.setComplete(error)
//                }
//
//            },
//            futureResult.completeCallback()
//        )
//
//        val result = futureResult.get()
//        assertNotNull(result ?: false)
//    }

//    @Test
//    fun withdrawBitcoinWithWifTest() {
//        val framework = initFramework()
//
//        val futureChangePassword = FutureTask<Boolean>()
//        val futureResult = FutureTask<TransactionResult>()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        framework.btcWithdraw(
//            "dima1",
//            "5J3UbadSyzzcQQ7HEfTr2brhJJpHhx3NsMzrvgzfysBesutNRCm",
//            "n38ykjakJ92huEXDAi1gp65AD7FjrhpAza",
//            "1",
//            "1.3.0",
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureChangePassword.setComplete(result)
//                }
//
//                override fun onError(error: LocalException) {
//                    error.printStackTrace()
//                    futureChangePassword.setComplete(error)
//                }
//
//            },
//            futureResult.completeCallback()
//        )
//
//        val result = futureResult.get()
//        assertNotNull(result ?: false)
//    }

    @Test
    fun withdrawBitcoinFeeTest() {
        val framework = initFramework()

        val future = FutureTask<AssetAmount>()

        if (connect(framework) == false) fail("Connection error")

        framework.getFeeForWithdrawBtcOperation(
                login,
                "n38ykjakJ92huEXDAi1gp65AD7FjrhpAza",
                "1",
                "1.3.0",
                object : Callback<AssetAmount> {
                    override fun onSuccess(result: AssetAmount) {
                        future.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        future.setComplete(error)
                    }

                }
        )

        val result = future.get()
        assertNotNull(result ?: false)
    }

//    @Test
//    fun withdrawEthereumWithWifTest() {
//        val framework = initFramework()
//
//        val futureChangePassword = FutureTask<Boolean>()
//        val futureResult = FutureTask<TransactionResult>()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        framework.ethWithdraw(
//            "vsharaev",
//            "5KjC8BiryoxUNz3dEY2ZWQK5ssmD84JgRGemVWwxfNgiPoxcaVa",
//            "0x46Ba2677a1c982B329A81f60Cf90fBA2E8CA9fA8",
//            "1",
//            "1.3.0",
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureChangePassword.setComplete(result)
//                }
//
//                override fun onError(error: LocalException) {
//                    error.printStackTrace()
//                    futureChangePassword.setComplete(error)
//                }
//
//            },
//            futureResult.completeCallback()
//        )
//
//        val result = futureResult.get()
//        assertNotNull(result ?: false)
//    }
//
//    @Test
//    fun withdrawBitcoinWithWifTest() {
//        val framework = initFramework()
//
//        val futureChangePassword = FutureTask<Boolean>()
//        val futureResult = FutureTask<TransactionResult>()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        framework.btcWithdraw(
//            "dima1",
//            "5J3UbadSyzzcQQ7HEfTr2brhJJpHhx3NsMzrvgzfysBesutNRCm",
//            "n38ykjakJ92huEXDAi1gp65AD7FjrhpAza",
//            "1",
//            "1.3.0",
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureChangePassword.setComplete(result)
//                }
//
//                override fun onError(error: LocalException) {
//                    error.printStackTrace()
//                    futureChangePassword.setComplete(error)
//                }
//
//            },
//            futureResult.completeCallback()
//        )
//
//        val result = futureResult.get()
//        assertNotNull(result ?: false)
//    }

    @Test
    fun registerERC20TokenTest() {
        val framework = initFramework()

        val futureChangePassword = FutureTask<Boolean>()
        val futureResult = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.registerERC20Token(
                login,
                wif,
                "0x724d1b69a7ba352f11d73fdbdeb7ff869cb22e19",
                "DIMASIKERC",
                "DMSSSERC",
                "18",
                "1.3.0",
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureChangePassword.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        futureChangePassword.setComplete(error)
                    }

                },
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                        futureResult.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        futureResult.setComplete(false)
                    }

                })
        )

        assertNotNull(futureChangePassword.get() ?: false)
        assertNotNull(futureResult.get() ?: false)
    }

    @Test
    fun getERC20TokenByAddressTest() {
        val framework = initFramework()

        val future = FutureTask<ERC20Token>()

        if (connect(framework) == false) fail("Connection error")

        framework.getERC20TokenByAddress(
                "0x724d1b69a7ba352f11d73fdbdeb7ff869cb22e19",
                future.completeCallback()
        )

        val result = future.get()
        assertNotNull(result ?: false)
    }

    @Test
    fun getERC20TokenByIdTest() {
        val framework = initFramework()

        val future = FutureTask<ERC20Token>()

        if (connect(framework) == false) fail("Connection error")

        framework.getERC20TokenByTokenId(
                "1.16.0",
                future.completeCallback()
        )

        val result = future.get()
        assertNotNull(result ?: false)
    }

    @Test
    fun checkERC20TokenTest() {
        val framework = initFramework()

        val future = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.checkERC20Token(
                legalContractParamsId,
                future.completeCallback()
        )

        val result = future.get() ?: false
        assertTrue(result)
    }

    @Test
    fun checkERC20TokenFailureTest() {
        val framework = initFramework()

        val future = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.checkERC20Token(
                "9999",
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        future.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        future.setComplete(false)
                    }

                }
        )

        val result = future.get() ?: false
        assertFalse(result)
    }

    @Test
    fun getERC20TokenDepositsTest() {
        val framework = initFramework()

        val future = FutureTask<List<ERC20Deposit>>()

        if (connect(framework) == false) fail("Connection error")

        framework.getERC20AccountDeposits(
                accountId,
                future.completeCallback()
        )

        val result = future.get()
        assertNotNull(result)
    }

    @Test
    fun getERC20TokenWithdrawalsTest() {
        val framework = initFramework()

        val future = FutureTask<List<ERC20Withdrawal>>()

        if (connect(framework) == false) fail("Connection error")

        framework.getERC20AccountWithdrawals(
                accountId,
                future.completeCallback()
        )

        val result = future.get()
        assertNotNull(result)
    }

    @Test
    fun withdrawERC20TokenTest() {
        val framework = initFramework()

        val futureComplete = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.erc20Withdraw(
                login,
                wif,
                "0x724d1b69a7ba352f11d73fdbdeb7ff869cb22e19",
                "1.16.0",
                "1",
                "1.3.0",
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureComplete.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        futureComplete.setComplete(error)
                    }

                },
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                        futureComplete.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        fail(error.message)
                        futureComplete.setComplete(error)
                    }

                })
        )

        val result = futureComplete.get()
        assertTrue(result ?: false)
    }

//    @Test
//    fun withdrawEthereumWithWifTest() {
//        val framework = initFramework()
//
//        val futureChangePassword = FutureTask<Boolean>()
//        val futureResult = FutureTask<TransactionResult>()
//
//        if (connect(framework) == false) fail("Connection error")
//
//        framework.ethWithdraw(
//            "dima1",
//            "5J3UbadSyzzcQQ7HEfTr2brhJJpHhx3NsMzrvgzfysBesutNRCm",
//            "0x46Ba2677a1c982B329A81f60Cf90fBA2E8CA9fA8",
//            "1",
//            "1.3.0",
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureChangePassword.setComplete(result)
//                }
//
//                override fun onError(error: LocalException) {
//                    error.printStackTrace()
//                    futureChangePassword.setComplete(error)
//                }
//
//            },
//            futureResult.completeCallback()
//        )
//
//        val result = futureResult.get()
//        assertNotNull(result ?: false)
//    }

    @Test
    fun withdrawEthereumFeeTest() {
        val framework = initFramework()

        val futureResult = FutureTask<AssetAmount>()

        if (connect(framework) == false) fail("Connection error")

        framework.getFeeForWithdrawEthereumOperation(
                login,
                "0x724d1b69a7ba352f11d73fdbdeb7ff869cb22e19",
                "1",
                "1.3.0",
                object : Callback<AssetAmount> {
                    override fun onSuccess(result: AssetAmount) {
                        futureResult.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        error.printStackTrace()
                        futureResult.setComplete(error)
                    }

                }
        )

        val result = futureResult.get()
        assertNotNull(result ?: false)
    }

//    @Test
//    fun registrationByWifTest() {
//        val framework = initFramework()
//
//        val futureRegistration = FutureTask<Boolean>()
//        val futureCompletion = FutureTask<Boolean>()
//
//        if (connect(framework) == false) fail("Connection error")
//
//        val randomPrivateKey = cryptoCoreComponent.getEdDSAPrivateKey()
////        val wif = cryptoCoreComponent.encodeToWif(randomPrivateKey)
//
//        framework.register(
//                userName = secondLogin,
//                wif = secondWif,
//                broadcastCallback = object : Callback<Boolean> {
//                    override fun onSuccess(result: Boolean) {
//                        futureRegistration.setComplete(true)
//                    }
//
//                    override fun onError(error: LocalException) {
//                        futureRegistration.setComplete(false)
//                    }
//
//                },
//                resultCallback = ResultCallback(object : Callback<RegistrationResult> {
//                    override fun onSuccess(result: RegistrationResult) {
//                        println(result.txId)
//                        futureCompletion.setComplete(true)
//                    }
//
//                    override fun onError(error: LocalException) {
//                        futureCompletion.setComplete(false)
//                    }
//
//                }))
//
//        val completed = futureCompletion.get() ?: false
//
//        assertTrue(completed)
//        val registered = futureRegistration.get() ?: false
//
//        assertTrue(registered)
//
//    }

//    @Test
//    fun registrationByWifTest() {
//        val framework = initFramework()
//
//        val futureRegistration = FutureTask<Boolean>()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        val randomPrivateKey = cryptoCoreComponent.getEdDSAPrivateKey()
//        val wif = cryptoCoreComponent.encodeToWif(randomPrivateKey)
//
//        framework.register(
//            "dima4", wif,
//            object : Callback<Boolean> {
//                override fun onSuccess(result: Boolean) {
//                    futureRegistration.setComplete(true)
//                }
//
//                override fun onError(error: LocalException) {
//                    futureRegistration.setComplete(false)
//                }
//
//            })
//
//        val registered = futureRegistration.get() ?: false
//
//        assertTrue(registered)
//    }

    @Test
    fun registrationFailureTest() {
        val framework = initFramework()

        val futureRegistration = FutureTask<Boolean>()
        val futureCompletion = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.register(
                userName = "-", wif = "5KjC8BiryoxUNz3dEY2ZWQK5ssmD84JgRGemVWwxfNgiPoxcaVa",
                broadcastCallback = object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureRegistration.setComplete(result)
                    }

                    override fun onError(error: LocalException) {
                        futureRegistration.setComplete(false)
                        futureCompletion.setComplete(false)
                    }

                },
                resultCallback = ResultCallback(object : Callback<RegistrationResult> {
                    override fun onSuccess(result: RegistrationResult) {
                        println(result.txId)
                        futureCompletion.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        futureCompletion.setComplete(false)
                    }

                }))

        val completed = futureCompletion.get() ?: false

        assertFalse(completed)
        val registered = futureRegistration.get() ?: false

        assertFalse(registered)
    }

    @Test
    fun subscriptionByIdTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureSubscriptionById = FutureTask<Boolean>()
        framework.subscribeOnAccount("init2", object : AccountListener {

            override fun onChange(updatedAccount: FullAccount) {
            }

        },
                object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        futureSubscriptionById.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        futureSubscriptionById.setComplete(error)
                    }
                })

        val resultFuture = FutureTask<TransactionResult>()

        thread {
            Thread.sleep(3000)
            sendAmount(framework, EmptyCallback(),
                    ResultCallback(object : Callback<TransactionResult> {
                        override fun onSuccess(result: TransactionResult) {
                            println(result.toString())
                            resultFuture.setComplete(result)
                        }

                        override fun onError(error: LocalException) {
                            resultFuture.setComplete(error)
                        }

                    }))
        }

        assertTrue(futureSubscriptionById.get(1, TimeUnit.MINUTES) == true)
        assertNotNull(resultFuture.get(1, TimeUnit.MINUTES))
    }

    @Test
    fun subscriptionByNameTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureSubscriptionByName = FutureTask<FullAccount>()
        val futureSubscriptionResult = FutureTask<Boolean>()

        framework.subscribeOnAccount("daria1", object : AccountListener {
            override fun onChange(updatedAccount: FullAccount) {
                futureSubscriptionByName.setComplete(updatedAccount)
            }

        }, futureSubscriptionResult.completeCallback())

        thread {
            Thread.sleep(3000)
            sendAmount(framework, EmptyCallback(),
                    ResultCallback(object : Callback<TransactionResult> {
                        override fun onSuccess(result: TransactionResult) {
                            println(result.toString())
                        }

                        override fun onError(error: LocalException) {
                            fail(error.message)
                        }

                    }))
        }

        assertNotNull(futureSubscriptionByName.get(1, TimeUnit.MINUTES))
        assertTrue(futureSubscriptionResult.get(1, TimeUnit.MINUTES) ?: false)
    }

    private fun sendAmount(framework: EchoFramework,
                           broadcastCallback: Callback<Boolean>,
                           resultCallback: ResultCallback<TransactionResult>) {
        framework.sendTransferOperation(
                login,
                wif,
                toNameOrId = "daria1",
                amount = "1",
                asset = "1.3.0",
                feeAsset = "1.3.0",
                broadcastCallback = broadcastCallback,
                resultCallback = resultCallback
        )
    }

    @Test
    fun subscribeOnBlockchainDataUpdatesWithAccountChanges() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureSubscriptionBlockchainData = FutureTask<DynamicGlobalProperties>()
        val futureSubscriptionBlockchainDataResult = FutureTask<Boolean>()
        val futureSubscriptionByName = FutureTask<FullAccount>()
        val futureSubscriptionAccountResult = FutureTask<Boolean>()

        framework.subscribeOnBlockchainData(object : UpdateListener<DynamicGlobalProperties> {
            override fun onUpdate(data: DynamicGlobalProperties) {
                futureSubscriptionBlockchainData.setComplete(data)
            }
        }, futureSubscriptionBlockchainDataResult.completeCallback())

        framework.subscribeOnAccount("daria1", object : AccountListener {
            override fun onChange(updatedAccount: FullAccount) {
                futureSubscriptionByName.setComplete(updatedAccount)
            }
        }, futureSubscriptionAccountResult.completeCallback())

        thread {
            Thread.sleep(3000)
            sendAmount(framework, EmptyCallback(),
                    ResultCallback(object : Callback<TransactionResult> {
                        override fun onSuccess(result: TransactionResult) {
                            println(result.toString())
                        }

                        override fun onError(error: LocalException) {
                            fail(error.message)
                        }

                    }))

            Thread.sleep(30000)
            futureSubscriptionBlockchainData.cancel()
        }

        assertNotNull(futureSubscriptionBlockchainData.get(1, TimeUnit.MINUTES))
        assertTrue(futureSubscriptionBlockchainDataResult.get(1, TimeUnit.MINUTES) ?: false)

        assertNotNull(futureSubscriptionByName.get(1, TimeUnit.MINUTES))
        assertTrue(futureSubscriptionAccountResult.get(1, TimeUnit.MINUTES) ?: false)
    }

    @Test
    fun subscriptionOnBlock() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureSubscriptionBlock = FutureTask<Block>()
        val futureSubscriptionResult = FutureTask<Boolean>()

        framework.subscribeOnBlock(object : UpdateListener<Block> {
            override fun onUpdate(data: Block) {
                futureSubscriptionBlock.setComplete(data)
            }
        }, futureSubscriptionResult.completeCallback())

        thread {
            Thread.sleep(3000)
            sendAmount(framework, EmptyCallback(),
                    ResultCallback(object : Callback<TransactionResult> {
                        override fun onSuccess(result: TransactionResult) {
                            println(result.toString())
                        }

                        override fun onError(error: LocalException) {
                            fail(error.message)
                        }

                    }))

            Thread.sleep(50000)
            futureSubscriptionBlock.cancel()
        }

        assertNotNull(futureSubscriptionBlock.get())
        assertTrue(futureSubscriptionResult.get() ?: false)
    }

    @Test
    fun subscribeContractsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<Boolean>()
        val futureSubscription = FutureTask<Map<String, List<ContractBalance>>>()

        framework.subscribeOnContracts(
                listOf(legalContractParamsId),
                listener = object : UpdateListener<Map<String, List<ContractBalance>>> {
                    override fun onUpdate(data: Map<String, List<ContractBalance>>) {
                        futureSubscription.setComplete(data)
                    }
                },
                callback = future.completeCallback()
        )

        thread {
            Thread.sleep(1000)
            callContractWithEmptyParams(
                    legalContractParamsId,
                    "logTestArray",
                    framework,
                    EmptyCallback()
            )
        }

        val contractResult = future.get(1, TimeUnit.MINUTES)
        assertNotNull(contractResult)

        val updateResult = futureSubscription.get(1, TimeUnit.MINUTES)
        assertNotNull(updateResult)
        assert(updateResult!!.isNotEmpty())
    }

    @Test
    fun subscribeContractLogsArrayTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<Boolean>()
        val futureSubscription = FutureTask<List<ContractLog>>()

        framework.subscribeOnContractLogs(
                legalContractParamsId,
                listener = object : UpdateListener<List<ContractLog>> {
                    override fun onUpdate(data: List<ContractLog>) {
                        futureSubscription.setComplete(data)
                    }
                },
                callback = future.completeCallback()
        )

        val emptyCallback = FutureTask<Boolean>()

        thread {
            Thread.sleep(1000)
            callContractWithEmptyParams(
                    legalContractParamsId,
                    "logTestArray",
                    framework,
                    emptyCallback.completeCallback()
            )
        }

        val contractResult = future.get(1, TimeUnit.MINUTES)
        assertNotNull(contractResult)

        val updateResult = emptyCallback.get(1, TimeUnit.MINUTES)
        assertNotNull(updateResult)
        assertTrue(updateResult ?: false)
    }

    @Test
    fun subscribeContractLogsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<Boolean>()
        val futureSubscription = FutureTask<List<ContractLog>>()

        framework.subscribeOnContractLogs(
                legalContractParamsId,
                listener = object : UpdateListener<List<ContractLog>> {
                    override fun onUpdate(data: List<ContractLog>) {
                        futureSubscription.setComplete(data)
                    }
                },
                callback = object : Callback<Boolean> {
                    override fun onSuccess(result: Boolean) {
                        future.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        future.setComplete(false)
                        futureSubscription.setComplete(error)
                    }

                }
        )

        assertTrue(future.get() ?: false)

        val withEmptyCallback = FutureTask<Boolean>()

        thread {
            Thread.sleep(1000)
            callContractWithEmptyParams(
                    legalContractParamsId,
                    "logTest",
                    framework,
                    withEmptyCallback.completeCallback()
            )
        }

        val contractResult = future.get()
        assertNotNull(contractResult)

        val updateResult = withEmptyCallback.get()
        assertNotNull(updateResult)
        assertTrue(withEmptyCallback.get() ?: false)
    }

    private fun callContractWithEmptyParams(
            contractId: String,
            methodName: String,
            framework: EchoFramework,
            sentCallback: Callback<Boolean>
    ) {
        framework.callContract(
                userNameOrId = login,
                wif = wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = contractId,
                methodName = methodName,
                methodParams = listOf(),
                broadcastCallback = sentCallback
        )
    }

    @Test
    fun transferWithWifTest() {
        val framework = initFramework()

        val futureTransfer = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.sendTransferOperation(
                login,
                wif,
                toNameOrId = secondLogin,
                amount = "1",
                asset = "1.3.0",
                feeAsset = "1.3.0",
                broadcastCallback = futureTransfer.completeCallback(),
                resultCallback =
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                    }

                    override fun onError(error: LocalException) {
                        fail(error.message)
                    }

                })
        )

        println(futureTransfer.get())
        assertTrue(futureTransfer.get() == true)
    }

    @Test
    fun getRequiredFeeTransferOperationWithWifTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<String>()

        framework.getFeeForTransferOperation(
                login,
                wif,
                "init2",
                amount = "10000",
                asset = "1.3.0",
                feeAsset = "1.3.0",
                callback = futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test(expected = LocalException::class)
    fun getRequiredTransferOperationFeeFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<String>()

        framework.getFeeForTransferOperation(
                login,
                "5J3UbadSyzzcQQ7HEfTr2brhJJpHhx3NsMzrvgzfysBesutNRCm",
                secondLogin,
                "10000",
                "1.3.1234",
                "1.3.1234",
                futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test
    fun getRequiredContractOperationFeeTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<ContractFee>()

        framework.getFeeForContractOperation(
                userNameOrId = accountId,
                contractId = legalContractParamsId,
                amount = "0",
                methodName = "testReturn",
                methodParams = listOf(),
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                callback = futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test
    fun getRequiredContractCreateOperationFeeTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<AssetAmount>()

        framework.getFeeForContractCreateOperation(
                userNameOrId = accountId,
                amount = "0",
                byteCode = legalContractParamsBytecode,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                callback = futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test
    fun getRequiredContractOperationFeeWithCodeTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<ContractFee>()

        framework.getFeeForContractOperation(
                userNameOrId = accountId,
                contractId = legalContractParamsId,
                amount = "0",
                code = "e13a7716",
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                callback = futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test(expected = LocalException::class)
    fun getRequiredContractOperationFeeFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureFee = FutureTask<ContractFee>()

        framework.getFeeForContractOperation(
                userNameOrId = login,
                contractId = legalContractParamsId,
                amount = "0",
                methodName = "testReturn",
                methodParams = listOf(),
                assetId = legalAssetId,
                feeAsset = "1.3.123123123",
                callback = futureFee.completeCallback()
        )

        assertNotNull(futureFee.get())
    }

    @Test
    fun listAssetsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureAssets = FutureTask<List<Asset>>()

        framework.listAssets(
                lowerBound = "ECHO", limit = 10,
                callback = futureAssets.completeCallback()
        )

        assertNotNull(futureAssets.get()?.isNotEmpty() ?: false)
    }

    @Test
    fun getAssetsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureAssets = FutureTask<List<Asset>>()

        framework.getAssets(
                listOf("1.3.0", "1.3.4"),
                futureAssets.completeCallback()
        )

        val assets = futureAssets.get()
        assertNotNull(assets)
        assertEquals(2, assets?.size ?: 0)
        assertEquals(assets?.firstOrNull()?.symbol, "ECHO")
    }

    @Test
    fun lookupAssetsSymbols() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureAssets = FutureTask<List<Asset>>()

        framework.lookupAssetsSymbols(
                listOf("ECHO", "1.3.0"),
                futureAssets.completeCallback()
        )

        val assets = futureAssets.get()
        assertNotNull(assets)
        assertEquals(assets?.size, 2)
        assertEquals(assets?.firstOrNull()?.getObjectId(), "1.3.0")
        assertEquals(assets?.get(1)?.symbol, "ECHO")
    }

    @Test
    fun createAssetWithWifTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val resultFuture = FutureTask<Boolean>()

        val asset = configureAsset()

        framework.createAsset(
                login,
                wif,
                asset,
                broadcastFuture.completeCallback(),
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                        resultFuture.setComplete(true)
                    }

                    override fun onError(error: LocalException) {
                        resultFuture.setComplete(false)
                    }

                })
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(resultFuture.get() ?: false)
    }

    @Test
    fun issueAssetWithWifTest() {
        val framework = initFramework()

        val futureIssue = FutureTask<Boolean>()

        if (connect(framework) == false) fail("Connection error")

        framework.issueAsset(
                login,
                wif,
                asset = "1.3.1",
                amount = "1",
                destinationIdOrName = secondLogin,
                broadcastCallback = futureIssue.completeCallback(),
                resultCallback =
                ResultCallback(object : Callback<TransactionResult> {
                    override fun onSuccess(result: TransactionResult) {
                        println(result.toString())
                    }

                    override fun onError(error: LocalException) {
                        fail(error.message)
                    }

                })
        )

        assertTrue(futureIssue.get() ?: false)
    }

    @Test
    fun createContractWithWifTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.createContract(
                login,
                wif,
                assetId = "1.3.0",
                feeAsset = "1.3.0",
                byteCode = legalContractParamsBytecode,
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)

        val result = future.get()
        assertTrue(result?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithRatioTest() {
        val framework = initFramework(BigDecimal.valueOf(100))

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                login,
                wif,
                assetId = "1.3.0",
                feeAsset = "1.3.0",
                contractId = legalContractParamsId,
                methodName = "logTest",
                methodParams = listOf(),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(future.get()?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithWifTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                login,
                wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = legalContractParamsId,
                methodName = "logTest",
                methodParams = listOf(),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(future.get()?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithWifUsingCodeTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        val contractCode = ContractInputEncoder().encode("logTest", listOf())

        framework.callContract(
                login,
                wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = legalContractParamsId,
                code = contractCode,
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(future.get()?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithAccountSubscriptionTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val futureSubscriptionByName = FutureTask<FullAccount>()
        val futureSubscriptionResult = FutureTask<Boolean>()

        framework.subscribeOnAccount(login, object : AccountListener {
            override fun onChange(updatedAccount: FullAccount) {
                futureSubscriptionByName.setComplete(updatedAccount)
            }

        }, futureSubscriptionResult.completeCallback())

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                login,
                wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = legalContractParamsId,
                methodName = "testReturn",
                methodParams = listOf(),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(
                future.get(100, TimeUnit.SECONDS)?.startsWith(validContractResultPrefix) ?: false
        )
    }

    @Test
    fun payableCallContractTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                login,
                wif,
                "1.3.0",
                "1.3.0",
                legalContractParamsId,
                "testReturn",
                listOf(),
                "1000",
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(future.get()?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithAddressParameterTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        val address = accountId

        framework.callContract(
                login, wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = legalContractParamsId,
                methodName = "testAddressParameter",
                methodParams = listOf(InputValue(AccountAddressInputValueType(), address)),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        assertTrue(future.get()?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test
    fun callContractWithStringParameterTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                login, wif,
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = legalContractParamsId,
                methodName = "testStringParameter",
                methodParams = listOf(
                        InputValue(StringInputValueType(), "door123")
                ),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)
        val result = future.get()
        assertTrue(result?.startsWith(validContractResultPrefix) ?: false)
    }

    @Test(expected = LocalException::class)
    fun callContractFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<String>()

        framework.callContract(
                "daria1",
                "5J3UbadSyzzcQQ7HEfTr2brhJJpHhx3NsMzrvgzfysBesutNRCm",
                assetId = legalAssetId,
                feeAsset = legalAssetId,
                contractId = illegalContractId,
                methodName = "incrementCounter",
                methodParams = listOf(),
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertFalse(broadcastFuture.get() ?: false)
        assertNull(future.get())
    }

    @Test
    fun queryContractTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<String>()

        framework.queryContract(
                login,
                legalAssetId,
                amount = "0",
                contractId = legalTokenId,
                methodName = "balanceOf",
                methodParams = listOf(
                        InputValue(
                                AccountAddressInputValueType(),
                                secondAccountId
                        )
                ),
                callback = future.completeCallback()
        )

        assertNotNull(future.get())
    }

    @Test
    fun queryContractWithCodeTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<String>()

        framework.queryContract(
                login,
                legalAssetId,
                "0",
                contractId = legalTokenId,
                code = "70a08231000000000000000000000000000000000000000000000000000000000000000e",
                callback = future.completeCallback()
        )

        assertNotNull(future.get())
    }

    @Test(expected = LocalException::class)
    fun queryContractFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<String>()

        framework.queryContract(
                "daria1",
                assetId = "1.3.0",
                amount = "0",
                contractId = illegalContractId,
                methodName = "testReturn",
                methodParams = listOf(),
                callback = future.completeCallback()
        )

        assertNotNull(future.get())
        assert(future.get()!!.isEmpty())
    }

    @Test
    fun getRegularContractResultTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<ContractResult>()

        framework.getContractResult(
                historyId = "1.12.0",
                callback = future.completeCallback()
        )

        val contractResult = future.get()
        contractResult?.toRegular()
        assertNotNull(contractResult)

        assertNotNull(contractResult?.toRegular())
    }

    @Test
    fun getContractResultx86Test() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<ContractResult>()

        framework.getContractResult(
                historyId = "1.12.1",
                callback = future.completeCallback()
        )

        val contractResult = future.get()
        assertNotNull(contractResult)

        contractResult?.toX86()
    }

    @Test
    fun getContractLogsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val broadcastFuture = FutureTask<Boolean>()
        val future = FutureTask<List<ContractLog>>()

        framework.getContractLogs(
                contractId = legalContractParamsId,
                fromBlock = "0",
                toBlock = "2000",
                broadcastCallback = broadcastFuture.completeCallback(),
                resultCallback = future.completeCallback()
        )

        assertTrue(broadcastFuture.get() ?: false)

        val contractResult = future.get(1, TimeUnit.MINUTES)
        assertNotNull(contractResult)
    }

    @Test(expected = LocalException::class)
    fun getContractResultFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<ContractResult>()

        framework.getContractResult(
                illegalHistoryItemId,
                future.completeCallback()
        )

        future.get()
    }

    @Test
    fun getContractsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<List<ContractInfo>>()

        framework.getContracts(
                listOf(legalContractParamsId),
                future.completeCallback()
        )

        val contractResult = future.get()
        assertNotNull(contractResult)
        assert(contractResult!!.isNotEmpty())
        assert(contractResult.size == 1)
        assertNotNull(contractResult.first())
    }

//    @Test
//    fun getRegularContractTest() {
//        val framework = initFramework()
//
//        if (connect(framework) == false) fail("Connection error")
//
//        val future = FutureTask<ContractStruct>()
//
//        framework.getContract(
//                legalContractParamsId,
//                future.completeCallback()
//        )
//
//        val contractResult = future.get()
//        assertNotNull(contractResult)
//    }

    //change in newer versions
    @Test
    fun getx86ContractTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<ContractStruct>()

        framework.getContract(
                "1.11.0",
                future.completeCallback()
        )

        val contractResult = future.get()
        assertNotNull(contractResult)
    }

    @Test(expected = LocalException::class)
    fun getContractFailureTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<ContractStruct>()

        framework.getContract(
                illegalContractId,
                future.completeCallback()
        )

        assertNotNull(future.get())
    }

    @Test
    fun getBlockDataTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<BlockData>()

        framework.databaseApiService.getBlockData(future.completeCallback())

        assertNotNull(future.get())
    }

    @Test
    fun getDynamicGlobalPropertiesTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<DynamicGlobalProperties>()

        framework.databaseApiService.getDynamicGlobalProperties(future.completeCallback())

        assertNotNull(future.get())
    }

    @Test
    fun getBlockTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<Block>()

        framework.databaseApiService.getBlock("1", future.completeCallback())

        assertNotNull(future.get())
    }

    @Test
    fun getChainIdTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<String>()

        framework.databaseApiService.getChainId(future.completeCallback())

        assertNotNull(future.get())
    }

    @Test
    fun getGlobalPropertiesTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<GlobalProperties>()

        framework.getGlobalProperties(future.completeCallback())

        val properties = future.get()
        assertNotNull(properties)
    }

    @Test
    fun getAccountDepositsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<List<Deposit?>>()

        framework.getAccountDeposits(login, null, future.completeCallback())

        val deposits = future.get()
        assertNotNull(deposits)
    }

    @Test
    fun getAccountWithdrawalsTest() {
        val framework = initFramework()

        if (connect(framework) == false) fail("Connection error")

        val future = FutureTask<List<Withdraw?>>()

        framework.getAccountWithdrawals(login, null, future.completeCallback())

        val deposits = future.get()
        assertNotNull(deposits)
    }

    //change in newer versions
//    @Test
//    fun getSidechainTransfersTest() {
//        val framework = initFramework()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        val future = FutureTask<List<SidechainTransfer>>()
//
//        framework.getSidechainTransfers(
//            "0x46Ba2677a1c982B329A81f60Cf90fBA2E8CA9fA8",
//            future.completeCallback()
//        )
//
//        val transfers = future.get()
//        assertNotNull(transfers)
//    }

    //change in newer versions
//    @Test
//    fun getObjectTest() {
//        val framework = initFramework()
//
//        if (connect(framework) == false) Assert.fail("Connection error")
//
//        val transferId = "1.19.2"
//
//        val sidechainTransferResult = framework.databaseApiService.getObjects(
//            listOf(transferId),
//            object : ObjectMapper<SidechainTransfer> {
//
//                override fun map(data: String): SidechainTransfer? {
//                    val gson = GsonBuilder().create()
//
//                    return gson.fromJson(data, SidechainTransfer::class.java)
//                }
//
//            })
//
//        assertNotNull(sidechainTransferResult)
//        assertNotNull(sidechainTransferResult.dematerialize())
//        assertEquals(transferId, sidechainTransferResult.dematerialize()[0].getObjectId())
//    }

    private fun connect(framework: EchoFramework): Boolean? {
        val futureConnect = FutureTask<Boolean>()

        framework.start(object : Callback<Any> {
            override fun onSuccess(result: Any) {
                futureConnect.setComplete(true)
            }

            override fun onError(error: LocalException) {
                futureConnect.setComplete(false)
            }

        })

        return futureConnect.get()
    }

    private fun configureAsset(): Asset {
        val asset = Asset("").apply {
            symbol = "DIMASASSETT"
            precision = 4
            issuer = Account(accountId)
//            setBtsOptions(
//                BitassetOptions(86400, 7)
//            )
        }

        val options =
                AssetOptions(
                        UnsignedLong.valueOf(100000000000),
                        AssetOptions.CHARGE_MARKET_FEE,
                        AssetOptions.CHARGE_MARKET_FEE,
                        Price().apply {
                            this.quote = AssetAmount(UnsignedLong.valueOf(1), Asset("1.3.1"))
                            this.base = AssetAmount(UnsignedLong.valueOf(1), Asset("1.3.0"))
                        },
                        "description"
                )

        asset.assetOptions = options

        return asset
    }
}
